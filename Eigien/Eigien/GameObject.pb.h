// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameObject.proto

#ifndef PROTOBUF_INCLUDED_GameObject_2eproto
#define PROTOBUF_INCLUDED_GameObject_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_GameObject_2eproto 

namespace protobuf_GameObject_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_GameObject_2eproto
namespace game {
class GameConfig;
class GameConfigDefaultTypeInternal;
extern GameConfigDefaultTypeInternal _GameConfig_default_instance_;
class GameObjectConfigItem;
class GameObjectConfigItemDefaultTypeInternal;
extern GameObjectConfigItemDefaultTypeInternal _GameObjectConfigItem_default_instance_;
}  // namespace game
namespace google {
namespace protobuf {
template<> ::game::GameConfig* Arena::CreateMaybeMessage<::game::GameConfig>(Arena*);
template<> ::game::GameObjectConfigItem* Arena::CreateMaybeMessage<::game::GameObjectConfigItem>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace game {

enum GameObjectConfigItem_Type {
  GameObjectConfigItem_Type_OBJECT = 0,
  GameObjectConfigItem_Type_PICTURE = 1
};
bool GameObjectConfigItem_Type_IsValid(int value);
const GameObjectConfigItem_Type GameObjectConfigItem_Type_Type_MIN = GameObjectConfigItem_Type_OBJECT;
const GameObjectConfigItem_Type GameObjectConfigItem_Type_Type_MAX = GameObjectConfigItem_Type_PICTURE;
const int GameObjectConfigItem_Type_Type_ARRAYSIZE = GameObjectConfigItem_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* GameObjectConfigItem_Type_descriptor();
inline const ::std::string& GameObjectConfigItem_Type_Name(GameObjectConfigItem_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    GameObjectConfigItem_Type_descriptor(), value);
}
inline bool GameObjectConfigItem_Type_Parse(
    const ::std::string& name, GameObjectConfigItem_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GameObjectConfigItem_Type>(
    GameObjectConfigItem_Type_descriptor(), name, value);
}
// ===================================================================

class GameObjectConfigItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:game.GameObjectConfigItem) */ {
 public:
  GameObjectConfigItem();
  virtual ~GameObjectConfigItem();

  GameObjectConfigItem(const GameObjectConfigItem& from);

  inline GameObjectConfigItem& operator=(const GameObjectConfigItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameObjectConfigItem(GameObjectConfigItem&& from) noexcept
    : GameObjectConfigItem() {
    *this = ::std::move(from);
  }

  inline GameObjectConfigItem& operator=(GameObjectConfigItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameObjectConfigItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameObjectConfigItem* internal_default_instance() {
    return reinterpret_cast<const GameObjectConfigItem*>(
               &_GameObjectConfigItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GameObjectConfigItem* other);
  friend void swap(GameObjectConfigItem& a, GameObjectConfigItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameObjectConfigItem* New() const final {
    return CreateMaybeMessage<GameObjectConfigItem>(NULL);
  }

  GameObjectConfigItem* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameObjectConfigItem>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameObjectConfigItem& from);
  void MergeFrom(const GameObjectConfigItem& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameObjectConfigItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GameObjectConfigItem_Type Type;
  static const Type OBJECT =
    GameObjectConfigItem_Type_OBJECT;
  static const Type PICTURE =
    GameObjectConfigItem_Type_PICTURE;
  static inline bool Type_IsValid(int value) {
    return GameObjectConfigItem_Type_IsValid(value);
  }
  static const Type Type_MIN =
    GameObjectConfigItem_Type_Type_MIN;
  static const Type Type_MAX =
    GameObjectConfigItem_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    GameObjectConfigItem_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return GameObjectConfigItem_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return GameObjectConfigItem_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return GameObjectConfigItem_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string fileName = 1;
  bool has_filename() const;
  void clear_filename();
  static const int kFileNameFieldNumber = 1;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  #if LANG_CXX11
  void set_filename(::std::string&& value);
  #endif
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // required .game.GameObjectConfigItem.Type elementType = 2;
  bool has_elementtype() const;
  void clear_elementtype();
  static const int kElementTypeFieldNumber = 2;
  ::game::GameObjectConfigItem_Type elementtype() const;
  void set_elementtype(::game::GameObjectConfigItem_Type value);

  // @@protoc_insertion_point(class_scope:game.GameObjectConfigItem)
 private:
  void set_has_filename();
  void clear_has_filename();
  void set_has_elementtype();
  void clear_has_elementtype();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  int elementtype_;
  friend struct ::protobuf_GameObject_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:game.GameConfig) */ {
 public:
  GameConfig();
  virtual ~GameConfig();

  GameConfig(const GameConfig& from);

  inline GameConfig& operator=(const GameConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameConfig(GameConfig&& from) noexcept
    : GameConfig() {
    *this = ::std::move(from);
  }

  inline GameConfig& operator=(GameConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameConfig* internal_default_instance() {
    return reinterpret_cast<const GameConfig*>(
               &_GameConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(GameConfig* other);
  friend void swap(GameConfig& a, GameConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameConfig* New() const final {
    return CreateMaybeMessage<GameConfig>(NULL);
  }

  GameConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameConfig& from);
  void MergeFrom(const GameConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .game.GameObjectConfigItem configs = 1;
  int configs_size() const;
  void clear_configs();
  static const int kConfigsFieldNumber = 1;
  ::game::GameObjectConfigItem* mutable_configs(int index);
  ::google::protobuf::RepeatedPtrField< ::game::GameObjectConfigItem >*
      mutable_configs();
  const ::game::GameObjectConfigItem& configs(int index) const;
  ::game::GameObjectConfigItem* add_configs();
  const ::google::protobuf::RepeatedPtrField< ::game::GameObjectConfigItem >&
      configs() const;

  // @@protoc_insertion_point(class_scope:game.GameConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::game::GameObjectConfigItem > configs_;
  friend struct ::protobuf_GameObject_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GameObjectConfigItem

// required string fileName = 1;
inline bool GameObjectConfigItem::has_filename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameObjectConfigItem::set_has_filename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameObjectConfigItem::clear_has_filename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameObjectConfigItem::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filename();
}
inline const ::std::string& GameObjectConfigItem::filename() const {
  // @@protoc_insertion_point(field_get:game.GameObjectConfigItem.fileName)
  return filename_.GetNoArena();
}
inline void GameObjectConfigItem::set_filename(const ::std::string& value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:game.GameObjectConfigItem.fileName)
}
#if LANG_CXX11
inline void GameObjectConfigItem::set_filename(::std::string&& value) {
  set_has_filename();
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:game.GameObjectConfigItem.fileName)
}
#endif
inline void GameObjectConfigItem::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:game.GameObjectConfigItem.fileName)
}
inline void GameObjectConfigItem::set_filename(const char* value, size_t size) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:game.GameObjectConfigItem.fileName)
}
inline ::std::string* GameObjectConfigItem::mutable_filename() {
  set_has_filename();
  // @@protoc_insertion_point(field_mutable:game.GameObjectConfigItem.fileName)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameObjectConfigItem::release_filename() {
  // @@protoc_insertion_point(field_release:game.GameObjectConfigItem.fileName)
  if (!has_filename()) {
    return NULL;
  }
  clear_has_filename();
  return filename_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameObjectConfigItem::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    set_has_filename();
  } else {
    clear_has_filename();
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:game.GameObjectConfigItem.fileName)
}

// required .game.GameObjectConfigItem.Type elementType = 2;
inline bool GameObjectConfigItem::has_elementtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameObjectConfigItem::set_has_elementtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameObjectConfigItem::clear_has_elementtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameObjectConfigItem::clear_elementtype() {
  elementtype_ = 0;
  clear_has_elementtype();
}
inline ::game::GameObjectConfigItem_Type GameObjectConfigItem::elementtype() const {
  // @@protoc_insertion_point(field_get:game.GameObjectConfigItem.elementType)
  return static_cast< ::game::GameObjectConfigItem_Type >(elementtype_);
}
inline void GameObjectConfigItem::set_elementtype(::game::GameObjectConfigItem_Type value) {
  assert(::game::GameObjectConfigItem_Type_IsValid(value));
  set_has_elementtype();
  elementtype_ = value;
  // @@protoc_insertion_point(field_set:game.GameObjectConfigItem.elementType)
}

// -------------------------------------------------------------------

// GameConfig

// repeated .game.GameObjectConfigItem configs = 1;
inline int GameConfig::configs_size() const {
  return configs_.size();
}
inline void GameConfig::clear_configs() {
  configs_.Clear();
}
inline ::game::GameObjectConfigItem* GameConfig::mutable_configs(int index) {
  // @@protoc_insertion_point(field_mutable:game.GameConfig.configs)
  return configs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::game::GameObjectConfigItem >*
GameConfig::mutable_configs() {
  // @@protoc_insertion_point(field_mutable_list:game.GameConfig.configs)
  return &configs_;
}
inline const ::game::GameObjectConfigItem& GameConfig::configs(int index) const {
  // @@protoc_insertion_point(field_get:game.GameConfig.configs)
  return configs_.Get(index);
}
inline ::game::GameObjectConfigItem* GameConfig::add_configs() {
  // @@protoc_insertion_point(field_add:game.GameConfig.configs)
  return configs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game::GameObjectConfigItem >&
GameConfig::configs() const {
  // @@protoc_insertion_point(field_list:game.GameConfig.configs)
  return configs_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace game

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::game::GameObjectConfigItem_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game::GameObjectConfigItem_Type>() {
  return ::game::GameObjectConfigItem_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_GameObject_2eproto
